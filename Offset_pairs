import pandas as pd
import re

# --- Helper 1: Normalize None-like values ---
def normalize_val(v):
    if pd.isna(v):
        return None
    s = str(v).strip().lower()
    if any(x in s for x in ['none', 'nan', 'null', '[none]', '(none)', '']):
        return None
    return s


# --- Helper 2: Identify xxx or None priority flag ---
def has_priority_value(s):
    s = normalize_val(s)
    if s is None:
        return True
    return bool(re.search(r'xxx\d+', str(s)))


# --- Helper 3: Get changed fields and values between two rows ---
def get_grca_changes(neg_row, pos_row, grca_cols):
    changed_fields, changed_values = [], []
    for col in grca_cols:
        from_val, to_val = normalize_val(neg_row[col]), normalize_val(pos_row[col])
        if from_val != to_val:
            changed_fields.append(col)
            changed_values.append(f"{from_val} → {to_val}")
    return changed_fields, changed_values


# --- Main Function ---
def find_offsetting_pairs_with_account_check(df, amount_col='adj_amount', grca_cols=None, tol=1e-6):
    """
    Identify +ve/-ve offsetting pairs (same account + same abs amount)
    and detect changes in GRCA fields.
    Priority pairing: if either side has 'xxx' or 'None' in any custom GRCA column.
    """

    if grca_cols is None:
        grca_cols = [c for c in df.columns if 'custom_grca' in c.lower()]

    df = df.copy()
    df['_abs_amt'] = df[amount_col].abs()
    results = []

    for (acct, amt), g in df.groupby(['grca_account', '_abs_amt']):
        neg, pos = g[g[amount_col] < -tol], g[g[amount_col] > tol]
        if neg.empty or pos.empty:
            continue

        # Sort both by priority flag count (more priority values → higher rank)
        neg['priority_score'] = neg[grca_cols].apply(
            lambda r: sum(has_priority_value(v) for v in r), axis=1)
        pos['priority_score'] = pos[grca_cols].apply(
            lambda r: sum(has_priority_value(v) for v in r), axis=1)

        neg = neg.sort_values('priority_score', ascending=False)
        pos = pos.sort_values('priority_score', ascending=False)

        # Pair rows
        for _, neg_row in neg.iterrows():
            for _, pos_row in pos.iterrows():
                changed_fields, changed_values = get_grca_changes(neg_row, pos_row, grca_cols)
                if changed_fields:
                    results.append({
                        'grca_account': acct,
                        'abs_amount': amt,
                        'adj_description': pos_row.get('adj_description', None),
                        'changed_fields': ', '.join(changed_fields),
                        'changed_values': ' | '.join(changed_values)
                    })
                    break  # one pair per neg row

    return pd.DataFrame(results).reset_index(drop=True)
