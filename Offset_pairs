import pandas as pd

def detect_grca_changes(df, amount_col='adj_amount', grca_cols=None, tol=0.0001):
    """
    Detects offsetting +/- adjustment pairs and compares their GRCA custom columns.
    Always keeps negative -> positive order.
    
    Parameters
    ----------
    df : pd.DataFrame
        Data containing adjustment amounts and GRCA columns.
    amount_col : str
        Column name for adjustment amount.
    grca_cols : list
        List of custom GRCA column names to compare.
    tol : float
        Numerical tolerance for equality in offsetting amounts.

    Returns
    -------
    pd.DataFrame : Summary of GRCA changes per matched pair.
    """
    if grca_cols is None:
        grca_cols = [col for col in df.columns if 'custom_grca' in col.lower()]
    
    # Round or use tolerance to find exact opposite pairs
    temp = df.copy()
    temp['_abs_amt'] = temp[amount_col].abs()

    # Group by absolute amount (pairs)
    results = []
    grouped = temp.groupby('_abs_amt')

    for amt, group in grouped:
        if len(group) >= 2:
            # Split +ve and -ve
            neg_rows = group[group[amount_col] < -tol]
            pos_rows = group[group[amount_col] > tol]
            for _, neg in neg_rows.iterrows():
                for _, pos in pos_rows.iterrows():
                    # Found a valid pair
                    change_dict = {'abs_amount': amt}
                    for col in grca_cols:
                        from_val = str(neg[col]).strip()
                        to_val = str(pos[col]).strip()
                        if from_val.lower() == 'none':
                            from_val = None
                        if to_val.lower() == 'none':
                            to_val = None
                        if from_val != to_val:
                            change_dict[col] = f"{from_val} â†’ {to_val}"
                    if len(change_dict) > 1:  # means at least one change
                        results.append(change_dict)

    result_df = pd.DataFrame(results)
    if not result_df.empty:
        result_df = result_df.reset_index(drop=True)
    
    return result_df
