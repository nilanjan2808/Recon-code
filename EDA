import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

def generate_eda(df, target=None, corr_threshold=0.7):
    """
    Generate a thorough EDA for a dataset.

    Parameters:
    -----------
    df : pd.DataFrame
        Input dataset
    target : str, optional
        Target column (for supervised problems)
    corr_threshold : float
        Threshold for high correlation flagging
    """

    print("===== 📊 Dataset Overview =====")
    print(f"Shape: {df.shape}")
    print("\nData Types:\n", df.dtypes)
    print("\nMemory Usage (MB):", round(df.memory_usage().sum() / 1024**2, 2))
    print("="*50)

    # Missing values
    print("\n===== ❓ Missing Values =====")
    missing = df.isnull().sum()
    print(missing[missing > 0].sort_values(ascending=False))
    
    # Summary statistics
    print("\n===== 🔍 Numerical Summary =====")
    display(df.describe().T)

    print("\n===== 🔠 Categorical Summary =====")
    cat_cols = df.select_dtypes(include=["object", "category"]).columns
    for col in cat_cols:
        print(f"\n--- {col} ---")
        print(df[col].value_counts(normalize=True).head(10))

    # Distribution plots
    num_cols = df.select_dtypes(include=np.number).columns
    print("\n===== 📈 Numerical Distributions =====")
    for col in num_cols:
        plt.figure(figsize=(12, 5))
        plt.subplot(1, 2, 1)
        sns.histplot(df[col].dropna(), kde=True)
        plt.title(f"Histogram & KDE of {col}")
        
        plt.subplot(1, 2, 2)
        sns.boxplot(x=df[col])
        plt.title(f"Boxplot of {col}")
        plt.show()

    # Correlation heatmap
    print("\n===== 🔗 Correlation Heatmap =====")
    corr = df[num_cols].corr()
    plt.figure(figsize=(10, 6))
    sns.heatmap(corr, annot=False, cmap="coolwarm", center=0)
    plt.title("Correlation Heatmap")
    plt.show()

    # Highly correlated features
    high_corr = np.where(np.abs(corr) > corr_threshold)
    high_corr_pairs = [(corr.index[x], corr.columns[y], corr.iloc[x,y]) 
                       for x,y in zip(*high_corr) if x!=y and x<y]
    if high_corr_pairs:
        print("\n⚠️ Highly Correlated Pairs (> {}):".format(corr_threshold))
        for pair in high_corr_pairs:
            print(pair)

    # Outlier detection (IQR method)
    print("\n===== 🚨 Outlier Detection (IQR) =====")
    for col in num_cols:
        Q1, Q3 = df[col].quantile([0.25, 0.75])
        IQR = Q3 - Q1
        outliers = ((df[col] < (Q1 - 1.5 * IQR)) | (df[col] > (Q3 + 1.5 * IQR))).sum()
        print(f"{col}: {outliers} outliers")

    # Normality tests (Shapiro-Wilk for small samples, KS for larger)
    print("\n===== 📏 Normality Tests =====")
    for col in num_cols:
        if df[col].dropna().shape[0] > 5000:  # Shapiro not reliable >5k
            stat, p = stats.kstest(df[col].dropna(), 'norm')
        else:
            stat, p = stats.shapiro(df[col].dropna())
        print(f"{col}: p-value={p:.4f} -> {'Normal' if p>0.05 else 'Not Normal'}")

    # Target analysis (if provided)
    if target and target in df.columns:
        print("\n===== 🎯 Target Analysis =====")
        if df[target].dtype in [np.float64, np.int64]:
            plt.figure(figsize=(6,4))
            sns.histplot(df[target], kde=True)
            plt.title(f"Target Distribution: {target}")
            plt.show()
        else:
            print(df[target].value_counts(normalize=True))
            sns.countplot(x=df[target])
            plt.title(f"Target Distribution: {target}")
            plt.show()

    print("\n✅ EDA Completed.")
