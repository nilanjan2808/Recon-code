import pandas as pd
import numpy as np

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder

# -----------------------------
# Utility function to train and evaluate
# -----------------------------
def run_rf_model(df, target_col='in_cadency', label_encode=True):
    df = df.copy()

    # Drop rows with missing target
    df = df.dropna(subset=[target_col])

    # Separate features and target
    X = df.drop(columns=[target_col])
    y = df[target_col]

    # Encode categorical columns
    for col in X.select_dtypes(include='object').columns:
        if label_encode:
            le = LabelEncoder()
            X[col] = le.fit_transform(X[col].astype(str))
        else:
            X = X.drop(columns=[col])

    # Fill NA
    X = X.fillna(0)

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train model
    clf = RandomForestClassifier(random_state=42)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)

    # Confusion matrix
    tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()

    return {
        "Accuracy": accuracy_score(y_test, y_pred),
        "Precision": precision_score(y_test, y_pred, zero_division=0),
        "Recall": recall_score(y_test, y_pred, zero_division=0),
        "F1 Score": f1_score(y_test, y_pred, zero_division=0),
        "False Positives": fp,
        "True Positives": tp,
        "True Negatives": tn,
        "False Negatives": fn,
        "Feature Importances": pd.Series(clf.feature_importances_, index=X.columns).sort_values(ascending=False)
    }

# -----------------------------
# Step 1: Run on df only
# -----------------------------
results_df = run_rf_model(df)
print("=== Results using df only ===")
for k, v in results_df.items():
    if k != "Feature Importances":
        print(f"{k}: {v}")

# -----------------------------
# Step 2: Merge with gl_april_df on 'Con' and run again
# -----------------------------
merged_df = pd.merge(df, gl_april_df, on='Con', how='left')
results_merged = run_rf_model(merged_df)

print("\n=== Results using merged df + gl_april_df ===")
for k, v in results_merged.items():
    if k != "Feature Importances":
        print(f"{k}: {v}")

# -----------------------------
# Step 3: False Positive Comparison
# -----------------------------
print("\n=== False Positives Comparison ===")
print(f"DF only: {results_df['False Positives']}")
print(f"Merged DF: {results_merged['False Positives']}")

# -----------------------------
# Step 4: Top Feature Importances
# -----------------------------
print("\n=== Top 10 Features from df only ===")
print(results_df["Feature Importances"].head(10))

print("\n=== Top 10 Features from merged df ===")
print(results_merged["Feature Importances"].head(10))
