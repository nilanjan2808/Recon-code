import pandas as pd

def prep_data(df: pd.DataFrame, custom_prefix: str = "custom_cde", id_col: str = "grca_id", amount_col: str = "adj_amount") -> pd.DataFrame:
    """
    Cleans and prepares the input dataframe.
    Steps:
    1. Combine all custom_cde columns (or given prefix) into a single comma-separated 'attribute' column.
    2. Drop values containing 'none' (case insensitive) from attributes before merging.
    3. Drop rows where id_col is missing or amount_col = 0.
    """

    # Identify custom columns dynamically
    custom_cols = [col for col in df.columns if custom_prefix.lower() in col.lower()]

    # Create attribute column by merging all custom_cde values into comma-separated string
    def merge_attributes(row):
        vals = []
        for col in custom_cols:
            val = str(row[col]).strip().lower()
            if val and "none" not in val:
                vals.append(val)
        return ", ".join(vals) if vals else None

    df["attribute"] = df.apply(merge_attributes, axis=1)

    # Drop invalid rows
    df = df.dropna(subset=[id_col, "attribute"])
    df = df[df[amount_col] != 0]

    return df


def summary_by_attribute(df: pd.DataFrame) -> pd.DataFrame:
    """Summarize adjustment by attribute."""
    result = (df.groupby("attribute")
                .agg(count=("adj_amount", "size"), total_adj_amount=("adj_amount", "sum"))
                .reset_index()
                .sort_values(["count", "total_adj_amount"], ascending=[False, False]))
    return result


def summary_by_grca(df: pd.DataFrame) -> pd.DataFrame:
    """Summarize adjustment by grca_id."""
    result = (df.groupby("grca_id")
                .agg(count=("adj_amount", "size"), total_adj_amount=("adj_amount", "sum"))
                .reset_index()
                .sort_values(["count", "total_adj_amount"], ascending=[False, False]))
    return result


def summary_by_desc(df: pd.DataFrame) -> pd.DataFrame:
    """Summarize adjustment by adjustment_desc."""
    result = (df.groupby("adjustment_desc")
                .agg(count=("adj_amount", "size"), total_adj_amount=("adj_amount", "sum"))
                .reset_index()
                .sort_values(["count", "total_adj_amount"], ascending=[False, False]))
    return result

