def investigate_causality(df1, df2, selected_row, group_cols, value_col='book value', top_n_fields=5):
    """
    For a selected anomaly row, investigate which fields contribute to the anomaly
    by drilling down into other dimensions. Returns up to `top_n_fields` DataFrames,
    sorted by the largest absolute percentage change.
    """

    # Filter for selected context
    condition = np.logical_and.reduce([df1[col] == selected_row[col] for col in group_cols])
    df1_filtered = df1[condition].copy()
    df2_filtered = df2[condition].copy()

    # Candidate fields for drill-down
    common_cols = set(df1_filtered.columns).intersection(df2_filtered.columns)
    candidate_cols = [col for col in common_cols if col not in group_cols + [value_col, 'book_value']]

    results = []

    for drill_col in candidate_cols:
        try:
            g1 = df1_filtered.groupby(group_cols + [drill_col], dropna=False)[value_col].sum().reset_index().rename(columns={value_col: 'Original Book Value'})
            g2 = df2_filtered.groupby(group_cols + [drill_col], dropna=False)[value_col].sum().reset_index().rename(columns={value_col: 'Transformed Book Value'})

            merged = pd.merge(g1, g2, on=group_cols + [drill_col], how='outer').fillna(0)
            merged['difference'] = merged['Original Book Value'] - merged['Transformed Book Value']
            merged['pct_change'] = np.where(
                merged['Original Book Value'] == 0,
                100.0,
                (merged['difference'] / merged['Original Book Value']) * 100
            )
            merged['drill_col'] = drill_col

            # Sort by absolute difference
            merged = merged.sort_values(by='difference', key=lambda x: x.abs(), ascending=False).reset_index(drop=True)

            # Compute max absolute pct_change for this drill col
            max_abs_pct_change = merged['pct_change'].abs().max()

            # Store both the DataFrame and its score
            results.append((max_abs_pct_change, merged))
        except Exception:
            continue

    # Sort results by max_abs_pct_change descending, and return only DataFrames
    results = sorted(results, key=lambda x: x[0], reverse=True)[:top_n_fields]
    return [df for _, df in results]
