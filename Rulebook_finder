import os
import pandas as pd

def create_mapping_table(df, col_name, folder_path):
    """
    Create a mapping table showing which files in folder_path
    contain (case-insensitive) matches for unique values from df[col_name].

    Args:
        df (pd.DataFrame): Input dataframe
        col_name (str): Column name to extract unique values from
        folder_path (str): Folder containing data files (.csv/.xlsx)

    Returns:
        pd.DataFrame: Mapping table with columns [col_name, 'files_found_in']
    """
    
    unique_values = df[col_name].dropna().astype(str).unique()
    mapping = {val: [] for val in unique_values}

    for file in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file)
        
        # Read CSV or Excel only
        if file.endswith('.csv'):
            try:
                temp_df = pd.read_csv(file_path, dtype=str, encoding='utf-8', errors='ignore')
            except Exception as e:
                print(f"⚠️ Error reading {file}: {e}")
                continue
        elif file.endswith(('.xlsx', '.xls')):
            try:
                temp_df = pd.read_excel(file_path, dtype=str)
            except Exception as e:
                print(f"⚠️ Error reading {file}: {e}")
                continue
        else:
            continue

        # Convert all text to lowercase for robust search
        temp_df = temp_df.apply(lambda col: col.str.lower() if col.dtype == 'object' else col)

        # Step 3: Search for each unique value
        for val in unique_values:
            v = str(val).lower().strip().replace('"', '').replace("'", "")
            found = temp_df.apply(lambda col: col.astype(str).str.contains(v, na=False, case=False)).any().any()
            if found:
                mapping[val].append(file)

    mapping_df = pd.DataFrame([
        {col_name: key, 'files_found_in': ', '.join(value) if value else 'Not Found'}
        for key, value in mapping.items()
    ])
    
    return mapping_df

