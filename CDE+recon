# app.py
import base64
import io
import pandas as pd
from dash import Dash, dcc, html, Input, Output, State, callback_context, dash_table
import dash_bootstrap_components as dbc
from sklearn.feature_selection import mutual_info_classif

app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
server = app.server

# ---------- Utility Functions ----------
# [functions unchanged â€“ same as previous implementation above]
# ... (same utility functions here) ...

# ---------- Layout ----------
app.layout = dbc.Container([
    html.H1("Anomaly Detection and Reconciliation Tool", className="my-4 text-center"),
    dbc.Row([
        dbc.Col([
            dcc.Upload(
                id='upload-source',
                children=html.Button('Upload Source File', className="btn btn-primary"),
                multiple=False
            )
        ], width=4),
        dbc.Col([
            dcc.Upload(
                id='upload-reference',
                children=html.Button('Upload Reference File', className="btn btn-secondary"),
                multiple=False
            )
        ], width=4),
        dbc.Col([
            dcc.Dropdown(
                id='threshold-dropdown',
                options=[
                    {'label': f'{x}%', 'value': x} for x in range(0, 105, 5)
                ],
                value=10,
                placeholder="Select Threshold (%)"
            )
        ], width=4),
    ], className="mb-4"),
    dcc.Tabs(id='tabs', value='summary-tab', children=[
        dcc.Tab(label='Anomaly Summary', value='summary-tab'),
        dcc.Tab(label='Anomaly Density-Based Filtering', value='density-tab')
    ]),
    html.Div(id='tab-content'),
    html.Footer("Developed by Finance Ninjas", className="text-center mt-5")
])

# ---------- Global Store ----------
df_store = {'source': None, 'reference': None}

# ---------- Callbacks ----------
@app.callback(
    Output('tab-content', 'children'),
    Input('tabs', 'value'),
    State('upload-source', 'contents'),
    State('upload-reference', 'contents'),
    State('threshold-dropdown', 'value')
)
def render_tab(tab, source_content, reference_content, threshold):
    if not (source_content and reference_content):
        return html.Div("Upload both files to proceed.", className="alert alert-warning")

    df1 = parse_contents(source_content)
    df2 = parse_contents(reference_content)
    df_store['source'] = df1
    df_store['reference'] = df2

    if tab == 'summary-tab':
        anomalies = get_anomaly_summary(df1, df2, threshold)
        suggested_cdes = get_suggested_cdes(df1, df2)

        return html.Div([
            dash_table.DataTable(
                id='anomaly-table',
                data=anomalies.to_dict('records'),
                columns=[{"name": i, "id": i} for i in anomalies.columns],
                row_selectable='single',
                style_table={'overflowX': 'auto'},
                page_size=10
            ),
            html.Br(),
            html.Div([dcc.Dropdown(id='cde-dropdown', options=[{'label': c, 'value': c} for c in suggested_cdes], multi=True)]),
            html.Div(id='drilldown-table')
        ])

    elif tab == 'density-tab':
        ranking = get_density_ranked_cdes(df1, df2)
        return html.Div([
            html.H5("Top CDE Suggestions Based on Mutual Information"),
            dash_table.DataTable(
                data=ranking.to_dict('records'),
                columns=[{"name": i, "id": i} for i in ranking.columns],
                style_table={'overflowX': 'auto'},
                page_size=10
            ),
            html.Br(),
            html.Div([
                dcc.Dropdown(
                    id='density-cde-dropdown',
                    options=[{'label': i, 'value': i} for i in ranking['CDE']],
                    multi=True,
                    placeholder="Select CDEs to group by"
                ),
                html.Div(id='density-summary-table')
            ])
        ])

@app.callback(
    Output('drilldown-table', 'children'),
    Input('anomaly-table', 'active_cell'),
    State('anomaly-table', 'data'),
    State('cde-dropdown', 'value')
)
def display_drilldown(active_cell, table_data, selected_cdes):
    if active_cell is None or not selected_cdes:
        return html.Div()

    row = table_data[active_cell['row']]
    dim2 = row['global_custom_dimension2']
    dim3 = row['global_custom_dimension3']
    df1, df2 = df_store['source'], df_store['reference']
    drill_data = get_drilldown_data(df1, df2, dim2, dim3, selected_cdes)

    return dash_table.DataTable(
        data=drill_data.to_dict('records'),
        columns=[{"name": i, "id": i} for i in drill_data.columns],
        style_table={'overflowX': 'auto'},
        page_size=10
    )

@app.callback(
    Output('density-summary-table', 'children'),
    Input('density-cde-dropdown', 'value')
)
def update_density_summary(cdes):
    if not cdes:
        return html.Div()
    df1, df2 = df_store['source'], df_store['reference']
    summary = get_density_summary(df1, df2, cdes)
    return dash_table.DataTable(
        data=summary.to_dict('records'),
        columns=[{"name": i, "id": i} for i in summary.columns],
        style_table={'overflowX': 'auto'},
        page_size=10
    )

if __name__ == '__main__':
    app.run_server(debug=True)
