import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
from collections import defaultdict

# -----------------------
# 1. Imputation Function
# -----------------------
def impute_missing_values(df):
    df = df.copy()
    df.replace([np.inf, -np.inf], np.nan, inplace=True)

    num_cols = df.select_dtypes(include='number').columns
    cat_cols = df.select_dtypes(include='object').columns

    df[num_cols] = df[num_cols].fillna(0)
    df[cat_cols] = df[cat_cols].fillna('NA')

    return df

# -------------------------------
# 2. Label Encode Categorical Cols
# -------------------------------
def encode_categoricals(df):
    df = df.copy()
    cat_cols = df.select_dtypes(include='object').columns
    encoders = {}

    for col in cat_cols:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col].astype(str))
        encoders[col] = le

    return df, encoders

# ----------------------
# 3. Preprocess Function
# ----------------------
def preprocess_df(df, target_col):
    df = df.copy()
    y = df[target_col]
    X = df.drop(columns=[target_col])

    X = impute_missing_values(X)
    X_encoded, encoders = encode_categoricals(X)

    df_cleaned = X_encoded.copy()
    df_cleaned[target_col] = y.values

    return df_cleaned, encoders

# ----------------------
# 4. Threshold Generator
# ----------------------
def generate_threshold_rules(model, X_train, y_train, feature_names, target_col):
    feature_importances = model.feature_importances_
    sorted_idx = np.argsort(feature_importances)[::-1]
    top_features = [feature_names[i] for i in sorted_idx[:5]]

    thresholds = {}
    for feature in top_features:
        pos_vals = X_train[feature][y_train == 1]
        if len(pos_vals) == 0:
            continue
        threshold = pos_vals.quantile(0.1)  # You can adjust this
        thresholds[feature] = threshold

    print("🔍 Threshold Rules (>= means likely positive class):")
    for k, v in thresholds.items():
        print(f"    - {k} >= {round(v, 4)}")
    return thresholds

# ----------------------
# 5. Main RF Runner
# ----------------------
def run_rf_model(df, target_col='target'):
    print("✅ Preprocessing data...")
    df_cleaned, encoders = preprocess_df(df, target_col)

    X = df_cleaned.drop(columns=[target_col])
    y = df_cleaned[target_col]

    print(f"📊 Class distribution: {y.value_counts().to_dict()}")

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, stratify=y, test_size=0.2, random_state=42
    )

    print("🧠 Training Random Forest...")
    model = RandomForestClassifier(
        n_estimators=100,
        class_weight='balanced',
        random_state=42,
        n_jobs=-1
    )
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)

    print("\n📈 Classification Report:")
    print(classification_report(y_test, y_pred))

    print("🧮 Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))

    feature_names = X.columns.tolist()
    thresholds = generate_threshold_rules(model, X_train, y_train, feature_names, target_col)

    return model, thresholds, encoders
