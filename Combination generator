import pandas as pd
import numpy as np

def find_offsetting_pairs_and_splits_final(df, grca_col='grca_account', desc_col='adj_description',
                                           amount_col='adj_amount', custom_cols=None, tol=1e-6):
    """
    Final version:
    - Matches within each (grca_account, adj_description)
    - Uses pair-first, then split logic
    - No duplicate or mirrored rows
    - Keeps unmatched rows with blank custom info
    """
    if custom_cols is None:
        custom_cols = [c for c in df.columns if c.startswith('custom_')]

    df = df.copy()
    results = []

    for (acc, desc), grp in df.groupby([grca_col, desc_col]):
        grp = grp.reset_index(drop=True)

        pos = grp[grp[amount_col] > 0].copy().reset_index(drop=True)
        neg = grp[grp[amount_col] < 0].copy().reset_index(drop=True)
        matched_idx = set()

        # --- (1) Exact pair match ---
        paired = False
        for i in range(len(pos)):
            for j in range(len(neg)):
                if j in matched_idx:
                    continue
                if abs(pos.loc[i, amount_col] + neg.loc[j, amount_col]) <= tol:
                    paired = True
                    matched_idx.add(j)

                    # Detect changed customs
                    diffs = [c for c in custom_cols if pos.loc[i, c] != neg.loc[j, c]]

                    # Add both rows once each
                    for row in [pos.loc[i], neg.loc[j]]:
                        results.append({
                            grca_col: acc,
                            desc_col: desc,
                            amount_col: row[amount_col],
                            'changed_customs': ', '.join(diffs) if diffs else None,
                            'changed_custom_values': ', '.join(str(row[c]) for c in diffs) if diffs else None
                        })
                    break  # move to next positive

        if paired:
            continue  # âœ… skip split logic if pairs already found

        # --- (2) Split matching logic (only if no pairs found) ---
        used_neg = set()
        for i in range(len(pos)):
            target = pos.loc[i, amount_col]
            current_sum = 0
            matched_neg_idx = []
            for j in range(len(neg)):
                if j in used_neg:
                    continue
                if abs(current_sum + neg.loc[j, amount_col]) <= abs(target) + tol:
                    current_sum += neg.loc[j, amount_col]
                    matched_neg_idx.append(j)
                if abs(current_sum + target) <= tol:
                    break

            if abs(current_sum + target) <= tol and matched_neg_idx:
                used_neg.update(matched_neg_idx)
                diffs = []
                for c in custom_cols:
                    vals = [pos.loc[i, c]] + list(neg.loc[matched_neg_idx, c].dropna().unique())
                    if len(set(vals)) > 1:
                        diffs.append(c)

                # Add positive row
                results.append({
                    grca_col: acc,
                    desc_col: desc,
                    amount_col: pos.loc[i, amount_col],
                    'changed_customs': ', '.join(diffs) if diffs else None,
                    'changed_custom_values': ', '.join(str(pos.loc[i, c]) for c in diffs) if diffs else None
                })

                # Add split negative rows
                for j in matched_neg_idx:
                    row = neg.loc[j]
                    results.append({
                        grca_col: acc,
                        desc_col: desc,
                        amount_col: row[amount_col],
                        'changed_customs': ', '.join(diffs) if diffs else None,
                        'changed_custom_values': ', '.join(str(row[c]) for c in diffs) if diffs else None
                    })

        # --- (3) Add remaining unmatched rows ---
        unmatched = grp[
            ~grp.index.isin(pos.index.union(neg.index))
        ]
        for _, r in unmatched.iterrows():
            results.append({
                grca_col: acc,
                desc_col: desc,
                amount_col: r[amount_col],
                'changed_customs': None,
                'changed_custom_values': None
            })

    return pd.DataFrame(results)
