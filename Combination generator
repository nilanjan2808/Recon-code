import pandas as pd
import numpy as np

def find_offsetting_groups_final_v3(df, grca_col='grca_account', desc_col='adj_description',
                                    amount_col='adj_amount', custom_cols=None, tol=1e-6):
    """
    Hybrid Hash + Greedy offsetting match finder.
    - Groups by (grca_account, adj_description)
    - Finds both exact pairs and split offset groups
    - Keeps each original row once
    - Determines changed customs by comparing positive vs negative subsets
    - Discards rows where adj_description is blank or null
    """
    if custom_cols is None:
        custom_cols = [c for c in df.columns if c.startswith('custom_')]

    # Drop rows with blank or null adj_description
    df = df.copy()
    df = df[df[desc_col].notna() & (df[desc_col].astype(str).str.strip() != '')]
    df['_abs_amt'] = df[amount_col].abs().round(6)
    results = []

    # Group by GRCA and adj_description
    for (acc, desc), grp in df.groupby([grca_col, desc_col]):
        grp = grp.reset_index(drop=True)
        grp['_used'] = False

        # --- 1️⃣ Exact pair matching (hash-based) ---
        abs_groups = grp.groupby('_abs_amt')
        for _, g in abs_groups:
            if abs(g[amount_col].sum()) < tol and len(g) > 1:
                grp.loc[g.index, '_used'] = True
                diffs = [c for c in custom_cols if g[c].nunique(dropna=True) > 1]

                for _, r in g.iterrows():
                    results.append({
                        grca_col: acc,
                        desc_col: desc,
                        amount_col: r[amount_col],
                        'changed_customs': ', '.join(diffs) if diffs else None,
                        'changed_custom_values': ', '.join(
                            str(r[c]) for c in diffs if pd.notna(r[c])
                        ) if diffs else None
                    })

        # --- 2️⃣ Split matching (sum-to-zero groups) ---
        rem = grp[~grp['_used']]
        if rem.empty:
            continue

        pos = rem[rem[amount_col] > 0]
        neg = rem[rem[amount_col] < 0]

        if not pos.empty and not neg.empty:
            total_sum = round(pos[amount_col].sum() + neg[amount_col].sum(), 6)
            if abs(total_sum) <= tol:
                # Compare customs between pos and neg
                diffs = []
                for c in custom_cols:
                    pos_vals = pos[c].dropna().unique()
                    neg_vals = neg[c].dropna().unique()
                    if len(set(pos_vals) ^ set(neg_vals)) > 0:
                        diffs.append(c)

                # Assign to each row (no merging)
                for _, r in pd.concat([pos, neg]).iterrows():
                    results.append({
                        grca_col: acc,
                        desc_col: desc,
                        amount_col: r[amount_col],
                        'changed_customs': ', '.join(diffs) if diffs else None,
                        'changed_custom_values': ', '.join(
                            str(r[c]) for c in diffs if pd.notna(r[c])
                        ) if diffs else None
                    })
            else:
                # unmatched remaining
                for _, r in rem.iterrows():
                    results.append({
                        grca_col: acc,
                        desc_col: desc,
                        amount_col: r[amount_col],
                        'changed_customs': None,
                        'changed_custom_values': None
                    })
        else:
            # unmatched remaining
            for _, r in rem.iterrows():
                results.append({
                    grca_col: acc,
                    desc_col: desc,
                    amount_col: r[amount_col],
                    'changed_customs': None,
                    'changed_custom_values': None
                })

    return pd.DataFrame(results)
