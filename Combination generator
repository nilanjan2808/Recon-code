import pandas as pd
import numpy as np

def find_offsetting_pairs_and_splits(df, grca_col='grca_account', desc_col='adj_description',
                                     amount_col='adj_amount', custom_cols=None, tol=1e-6):
    """
    Finds +ve/-ve offsetting pairs or splits within each (GRCA account, adj_description)
    combination and identifies which custom fields changed.

    Keeps both pair and split matches.
    Shows changed_custom_values as the current rowâ€™s values.
    """
    if custom_cols is None:
        custom_cols = [c for c in df.columns if c.startswith('custom_')]

    df = df.copy()
    df['_used'] = False
    df['_abs'] = df[amount_col].abs().round(6)

    results = []

    # group by both GRCA and adj description
    for (acc, desc), grp in df.groupby([grca_col, desc_col]):
        grp = grp.reset_index(drop=True)
        grp['_used'] = False

        pos = grp[grp[amount_col] > 0].copy()
        neg = grp[grp[amount_col] < 0].copy()

        # Track usage
        pos['_remain'] = pos[amount_col]
        neg['_remain'] = neg[amount_col]

        for i, prow in pos.iterrows():
            for j, nrow in neg.iterrows():
                if abs(prow['_remain']) < tol or abs(nrow['_remain']) < tol:
                    continue

                # Amount that can offset
                amt_to_match = min(prow['_remain'], -nrow['_remain'])
                if amt_to_match <= tol:
                    continue

                # Update remaining
                pos.at[i, '_remain'] -= amt_to_match
                neg.at[j, '_remain'] += amt_to_match  # negative side increases toward zero

                # Record both rows
                temp = pd.DataFrame([prow, nrow])
                diffs = []
                for c in custom_cols:
                    vals = temp[c].dropna().unique()
                    if len(vals) > 1:
                        diffs.append(c)

                for _, r in temp.iterrows():
                    results.append({
                        grca_col: acc,
                        desc_col: desc,
                        amount_col: r[amount_col],
                        'changed_customs': ', '.join(diffs) if diffs else None,
                        'changed_custom_values': ', '.join(str(r[c]) for c in diffs) if diffs else None
                    })

        # Handle any unmatched leftovers
        unmatched = pd.concat([pos[pos['_remain'].abs() > tol],
                               neg[neg['_remain'].abs() > tol]], ignore_index=True)
        for _, r in unmatched.iterrows():
            results.append({
                grca_col: acc,
                desc_col: desc,
                amount_col: r[amount_col],
                'changed_customs': None,
                'changed_custom_values': None
            })

    return pd.DataFrame(results)

